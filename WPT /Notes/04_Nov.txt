AJAX: Asynchronous JavaScript And XML

AJAX is used to send req on a server and get response from it 
AJAX is async that means, it will not block other process
AJAX will not reload the browser during the req and resp process


AJAX is used to send req on server and get response without blocking the other process and also without reloading the browser 


Steps:
1. We have to create an object of XMLHttpRequest
   var xhr = new XMLHttpRequest();

2. We have to initialize/open the request. Mention the url and request method using which req has to be sent.
   
	xhr.open(method,url)
	xhr.open("GET","https://www.myapp.com/getdata");

3. Send the request
	
	xhr.send()

4. Read the response:

	    
	TO read the response we need to check the state of the request
	During the entire ajax process, browser maintains an integer flag 
        With each step of ajax, integer flag changes its value 
	readyState is the name of that flag
	
	readyState -> 0 to 4
	0 -> new XMLHttpRequest object has been created
	1 -> request has been opened ( open() has been called )
	2 -> request has been sent
	3 -> Server has accepted the request 
	4 -> Server has sent the response, response is ready at the client side

        whenever ready state changes, it will fire an event ( onreadystatechange )


<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Document</title>
</head>

<body>
   <button onclick="fetchData()">Fetch Data</button>
   <script>
      function fetchData() {
         var xhr = new XMLHttpRequest();
         xhr.open("GET", "https://jsonplaceholder.typicode.com/users");
         xhr.send();
         xhr.onreadystatechange = ()=>{
            if(xhr.readyState === 4 && xhr.status === 200) {
               var users = JSON.parse(xhr.responseText);
               resolve(users);
            }
         }
         // read the response 
         
      }

   </script>
</body>

</html>


try {
            const response = await fetch("https://jsonplaceholder.typicode.com/users");
            console.log(response);
            const users = await response.json();
            console.log(users);
         } catch (error) {
            console.log(error);
         }


API: Application Programming Interface

Interface

API is a way to use functionalities/features/services of one app into another app 

types of APIs
1. Standalone APIs: given by native OS
	
2. Web APIs: running on a server, to access them we need to send req on url and we will get response 


www.irctc.in/trains/src/dest/dot

OOPS in JS:
class Employee{
         constructor(id,name){
            this.id = id;
            this.name = name;
         }
         show(){
            console.log(this.id,this.name);
         }

      }

      var emp1 = new Employee(111,"Lawrence");
      emp1.show();

      var emp2 = new Employee(112, "Selmun Khon");
      emp2.show();

class Animal{
	speak(){
	
	}
      }

      class Dog extends Animal{
	speak(){
		console.log("bhow bhow");
	}
      }

ES is standard ()=>{}, class keyword ES5,6
JS is implementation of ES

var obj = {
         x : "Hello",
         y: function (){
            console.log(this.x); // current json object assigned in obj 
         }
      }
      obj.y();




var obj = {
         x : "Hello",
         y: ()=>{
            console.log(this.x); // refer to window object         }
      }
      obj.y();


Node JS: 

Node js is not a language, not a library

Node js is runtime environment for JS 
Using Node js, we can execute js code as a standalone application

Module: bundle that will contain properties, functions, classes, constants

reference with other programming: header file, packages 

Types of modules:
1. Pre-defined: The modules which are already developed and provided by node js
http, fs, crypto, url, fs/promises,
 
2. User-defined: module created by a developer 

File handling:
node js provides a module with name 'fs', which has functions to perform operations on a file 

demo-module -> sum(), power() 

var x = require('demo-module')
x.sum();
x.power();

fs -> writeFile, readFile

const fs = require('fs');
fs.writeFile()
fs.readFile()


const fileSystem = require('fs');
fileSystem.writeFile()
fileSystem.readFile()






const fs = require('fs');

fs.writeFile("my-notes.txt", "This is text data", () => {
   console.log("File created successfully");
});

console.log("after writing file");

const fs = require('fs');

fs.writeFileSync("my-notes.txt", "This is text data");

console.log("after writing file");